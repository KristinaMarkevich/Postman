{
	"info": {
		"_postman_id": "3b5936d0-c60f-4042-a547-74aaa766a330",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26793432"
	},
	"item": [
		{
			"name": "HM2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.//\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HM2.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Статус код 200//\r",
							"var resp = pm.response.json ();\r",
							"\r",
							"//Проверить, что name, age, salary в ответе равно request(name, age, salary вбить руками)//\r",
							"pm.test(\"test name\", function () {\r",
							"    pm.expect(pm.response.json().name).to.equal(\"Kris\"); \r",
							"});\r",
							"pm.test(\"test age\", function () {\r",
							"   \r",
							"    pm.expect(+resp.age).to.eql(25);\r",
							"});\r",
							"pm.test(\"test salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(400);\r",
							"});\r",
							"\r",
							"\r",
							"//Спарсить request//\r",
							"var reqData = request.data;\r",
							"\r",
							"//Проверить, что name, age, salary в ответе равно request(name, age, salary достать из request)//\r",
							"pm.test(\"reqData test name\", function () {\r",
							"    pm.expect(resp.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"reqData test age\", function (){\r",
							"    pm.expect(+resp.age).to.eql(+reqData.age);\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"reqData test salary\", function (){\r",
							"    pm.expect(resp.salary).to.eql(Number(reqData.salary));    \r",
							"})\r",
							"//Вывести в консоль параметр family из response//\r",
							"console.log(resp.family.children[0,1])\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)//\r",
							"pm.test(\"salarytest\", function (){\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(resp.salary*4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kris",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HM2.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json и request//\r",
							"var resp = pm.response.json ()\r",
							"\r",
							"var req = pm.request.url.query.toObject()\r",
							"//Проверить, что name, age, salary в ответе равно request(name, age, salary забрать из request)//\r",
							"pm.test(\"testname\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"pm.test(\"testage\", function (){\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"pm.test(\"testsalary\", function () {\r",
							"    pm.expect(+resp.salary).to.eql(+req.salary)\r",
							"})\r",
							"//Вывести в консоль параметр family из response.//\r",
							"console.log(resp.family)\r",
							"//Проверить, что у параметра dog есть параметры name, age//\r",
							"pm.test(\"testdogname\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"pm.test(\"testdogage\",() =>  {\r",
							"    \r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.//\r",
							"pm.test(\"dogtest name\", function () {\r",
							"    \r",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4//\r",
							"pm.test(\"dogtest age\", () => {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kris",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "400",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "25",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kris&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kris"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "dog",
							"value": "Lucky",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW2.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json и request//\r",
							"var resp = pm.response.json () ;\r",
							"var req = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//\r",
							"pm.test(\"testname\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name)\r",
							"})\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"//\r",
							"pm.test(\"testage\", function () {\r",
							"    pm.expect(+resp.age).to.eql(+req.age)\r",
							"})\r",
							"//Вывести в консоль параметр salary из request и response//\r",
							"console.log(resp.salary)\r",
							"console.log(req.salary)\r",
							"//Вывести в консоль 0-й,1-й, 2-й элемент параметра salary из response.//\r",
							"console.log(resp.salary[0])\r",
							"console.log(resp.salary[1])\r",
							"console.log(resp.salary[2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)//\r",
							"pm.test(\"salary0\", function (){\r",
							"    pm.expect(+resp.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)//\r",
							"pm.test(\"salary1\", function (){\r",
							"    pm.expect(+resp.salary[1]).to.eql(+req.salary*2)\r",
							"})\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)//\r",
							"pm.test(\"salary2\", function (){\r",
							"    pm.expect(+resp.salary[2]).to.eql(+req.salary*3)\r",
							"})\r",
							"//Создать и передать в окружении переменную name, age, salary//\r",
							"pm.environment.set(\"name\", \"Kris\");\r",
							"pm.environment.set(\"age\", \"25\");\r",
							"pm.environment.set(\"salary\", \"500\");\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary//\r",
							"for (let i = 0; i < resp.salary.length; i++) {\r",
							"  console.log(\"salary =\", resp.salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kris&age=25&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kris"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HM2.5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200//\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json и request//\r",
							"var resp = pm.response.json()\r",
							"var req = request.data \r",
							"//Проверить, что json response имеет параметр start_qa_salary, qa_salary_after_6_months, qa_salary_after_12_months, qa_salary_after_1.5_year, qa_salary_after_3.5_years//\r",
							"pm.test(\"start_qa\", function(){\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"pm.test(\"qa_salary_after_6_months\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"pm.test(\"qa_salary_after_12_months\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"pm.test(\"qa_salary_after_1.5_year\", function (){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"pm.test(\"qa_salary_after_3.5_years\", function (){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"//Проверить, что json response имеет параметр person//\r",
							"pm.test(\"have_pers\", function(){\r",
							"    pm.expect(resp).to.have.property(\"person\")\r",
							"})\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)//\r",
							"pm.test(\"st_qa_1\", function(){\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)//\r",
							"pm.test(\"qa_s_2\", function(){\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)//\r",
							"pm.test(\"qa_s_3\", function(){\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_1.5_months равен salary*3.3 из request (salary забрать из request.)//\r",
							"pm.test(\"qa_s_4\", function(){\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"})\r",
							"//Проверить, что параметр qa_salary_after_3.5_months равен salary*3.8 из request (salary забрать из request.)//\r",
							"pm.test(\"qa_s_5\", function(){\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)\r",
							"})\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)//\r",
							"pm.test(\"salary\",function(){\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary)\r",
							"})\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)//\r",
							"pm.test(\"age\",function(){\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age)\r",
							"})\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)//\r",
							"pm.test(\"sal\",function(){\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2)\r",
							"})\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.//\r",
							"for (let propName in resp.person) {\r",
							"  console.log(propName );\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}